Note: Below you will see < Some Text > (inside brackets.) Don't type the < or >. They are just there to show you its not a literal value
Branch name and stuff is case sensitive!

---------------------------------------------------------------------------------------
  
-- Basic --
1. Grab latest from server "git fetch origin" or "git pull origin"

2. Switch Branches
	"git checkout <BranchName>" <-- branch name is the branch you want to switch into

3. Check the status of files
	"git status"

4. To stage changes
	"git add <FileNameToAdd>"
	or 
	"git add -A" <-- stages all files changes. 

5. To go from staging to commited
	"git commit -m <MessageToGiveTheCommit>" <-- Message to give the commit

6. Push commits to the server
	"git push -u origin <BranchName>" <-- branch name is the branch you want to push it to.

7. To toally reset your branch to what is on the server (2 step process0)
	First Step:"git fetch origin"
	Second Step:"git reset --hard origin/master"

**Note you can add all the files and commit in 1 statement **
	-Use "git commit -a -m  <MessageToGiveTheCommit>" <-- Message to give the commit

You can also open "gitk" which is the simple gui for git. The gui is not the greatest so the command line is better for simple changes.

---------------------------------------------------------------------------------------

-- Cherry Picking, This is grabbing 1 specific change and pusing that to another branch. --
1. Grab the hash of the change you want to merge / push
2. Change to the branch you want to merge this change into ("git checkout <BranchName>")
3. "git cherry-pick <HashOfChange>" <-- hash from step #1
4. "git push"  <-- pushes the changes you just cherry picked to the server.

---------------------------------------------------------------------------------------

-- Branching --
1. Branch From Master Into New Local Directory
	"git branch NewBranchName" <-- New Branch Name is the name you want to give this new branch
	Or to create and change to the new branch you can use
	"git checkout -b NewBranchName" <-- New Branch Name is the name you want to give this new branch
2. Make your changes and push them up to the server 
		ie: "git commit -a -m "documentation changes"...then "git push origin nameofbranchyouarein" 
3. Change to the branch you want to merge into "git checkout master"
4. "git merge <BranchToMergeFrom>"  <-- branch name you want to merge from
5. "git push" <-- to push the merge to the server
6. To delete local branch (if you want to delete) --> "git branch -d <BranchName>" <-- Branch name to delete
7. To delete the branch on the server "git push origin :<BranchName>" <-- Branch name is the name of the branch you want to delete on the server

---------------------------------------------------------------------------------------

-- Stashing Changes (like shelving in tfs)
1. Make your changes
2. To 'shelve or stash them' use "git stash"
3. To pull up your changes to your working env. use "git status pop". Note: This will remove the stash. So if you un-do your changes you won't be able to pull them back. TFS makes you delete the shelve. GIT uses like a stack. Once you pop it, it won't be there.
4. You can always use "git stash list" to see what is currently stashed.
