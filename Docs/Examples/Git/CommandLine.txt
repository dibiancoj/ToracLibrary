Note: Below you will see < Some Text > (inside brackets.) Don't type the < or >. They are just there to show you its not a literal value
Branch name and stuff is case sensitive!


----------------------------- Basic Commands -----------------------------
1. Grab latest from server "git fetch origin" or "git pull origin"

2. Switch Branches
	"git checkout <BranchName>" <-- branch name is the branch you want to switch into

3. Check the status of files
	"git status"

4. To stage changes
	"git add <FileNameToAdd>"
	or 
	"git add -A" <-- stages all files changes. Or "git add ."

5. To go from staging to commited
	"git commit -m <MessageToGiveTheCommit>" <-- Message to give the commit

6. Push commits to the server
	"git push -u origin <BranchName>" <-- branch name is the branch you want to push it to.

7. To toally reset your branch to what is on the server (2 step process0)
	First Step:"git fetch origin"
	Second Step:"git reset --hard origin/master"

**Note you can add all the files and commit in 1 statement **
	-Use "git commit -a -m  <MessageToGiveTheCommit>" <-- Message to give the commit

You can also open "gitk" which is the simple gui for git. The gui is not the greatest so the command line is better for simple changes.

8. "git log" will show you the commit log. You can do "git log --all --graph" which shows you all branches in the graph format.

----------------------------- Cherry Picking (Merging Specific Changes) -----------------------------
1. Grab the hash of the change you want to merge / push
2. Change to the branch you want to merge this change into ("git checkout <BranchName>")
3. "git cherry-pick <HashOfChange>" <-- hash from step #1
4. "git push"  <-- pushes the changes you just cherry picked to the server.

----------------------------- Branching -----------------------------
1. Branch From Master Into New Local Directory
	"git branch NewBranchName" <-- New Branch Name is the name you want to give this new branch
	Or to create and change to the new branch you can use
	"git checkout -b NewBranchName" <-- New Branch Name is the name you want to give this new branch
2. Make your changes and push them up to the server 
		ie: 
			Step A. "git commit -a -m "documentation changes"
			Step B. "git push origin nameofbranchyouarein" 
3. Change to the branch you want to merge into "git checkout master"
4. "git merge <BranchToMergeFrom>"  <-- branch name you want to merge from
5. "git push" <-- to push the merge to the server
6. To delete local branch (if you want to delete) --> "git branch -d <BranchName>" <-- Branch name to delete
7. To delete the branch on the server "git push origin :<BranchName>" <-- Branch name is the name of the branch you want to delete on the server

Experience / Better Traceability: If you want to see the branch history then use the following:
git merge --no-ff myfeature  --> "--no-ff". This shows in the git graph with the number of changes you made in the feature branch. Otherwise, it gets merged into a straight line with development.

----------------------------- Stashing (like tfs shelving) -----------------------------
1. Make your changes
2. To 'shelve or stash them' use "git stash"
3A. To pull up your changes to your working env. use "git stash pop". Note: This will remove the stash. So if you un-do your changes you won't be able to pull them back. TFS makes you delete the shelve. GIT uses like a stack. Once you pop it, it won't be there.
3B. You can use "git stash apply" which pulls the changes into your workspace but ALSO leaves it stashed away.
4. You can always use "git stash list" to see what is currently stashed.

----------------------------- Git just using local folders -----------------------------
1. Create a folder
2. Command line into that folder. 
3. "git init" --> which creates a .git folder. You can restore from that folder

If you ever want to restore from JUST the .git folder.
1. Create a new folder
2. from the folder that has the ".git" folder....run 'git clone .git "c:\mynewfoldertocloneinto"'
(you should set the path to the .git folder as well)

----------------------------- Rebase -----------------------------
git rebase origin/master --> this moves all new changes in master into your working branch. This way you have the latest set of changes and you don't have a merge commit.
ie: branch a new dev...then before merging back to master you can move any new changes from master into your branch and put your new changes at the top. 

the best way i've found is the following:

1. git checkout feature1 (make changes)
2. git rebase origin/development
3. git push --force origin feature1 (This helps with merge commits after a rebase. Again, best way I've found so far. Forcing isn't great if you share this branch with others. If we find better ways then update this.)

Don't rebase public or branches where other members can see / change. ie: rebase local branches. The solution above isn't great. Again, just rebase local branches. If you have pushed your local branch to remote then don't rebase

----------------------------- Git Ignore -------------------------
If you add a git ignore but those files you are ignoring are already checked in then you will run into issues.
run the following to fix

git rm -r --cached .
git add .
git commit -m "fixed untracked files"

Also, use something like the following in your ignore file
**/wwwroot/Build/
**/wwwroot/BuildFramework/


----------------------------- Git UI -------------------------
Source Tree is a pretty gui tool for git

---------------- git remove branches that were removed on origin -------------------
git remote prune origin
