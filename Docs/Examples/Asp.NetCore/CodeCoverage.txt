1.	Nuget Add -     coverlet.msbuild
2.	Install the global tool “dotnet tool install --global dotnet-reportgenerator-globaltool”

3.	Add the following to your unit test project. We have 1 unit test project per shared project (dll). So we have an include in the tag below. If you have only 1 unit test project then use the exclude. I can help if need be.
  <PropertyGroup Condition="'$(IsTestProject)' == 'true'">
    <UseSourceLink>true</UseSourceLink>
    <CoverletOutputFormat>cobertura</CoverletOutputFormat>
    <Include>[MskPatientPortal]*</Include>
    <ExcludeByAttribute>Obsolete,GeneratedCodeAttribute,CompilerGeneratedAttribute</ExcludeByAttribute>
    <!--<Exclude>[xunit.*]*,[MskPatientPortal.Models]*,[MskPatientPortal.Services.Http]*,[MskPatientPortal.Library.Rtf]*,[MskPatientPortal.Library.PdfConversion]*,[MskPatientPortal.Library.*]*</Exclude>-->
    <CoverletOutput>$(MSBuildThisFileDirectory)/CoverageTest/</CoverletOutput>
    <CollectCoverage Condition="'$(TF_BUILD)' == 'true'">true</CollectCoverage>
  </PropertyGroup>


4.	Take note of the “ExcludeByAttribute” Those attributes will be excluded from the coverage test. You can also add the [ExcludeFromCodeCoverageAttribute] at the class, method, property level. That attribute is built in by default.




To Run:
*Run from your unit test directory
1. dotnet test /p:CollectCoverage=true
2. reportgenerator "-reports:CoverageTest/coverage.cobertura.xml" "-targetdir:C:\Portal3_0\CodeCoverageReport" 
