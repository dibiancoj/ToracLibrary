
*** Configuration Binding ***

//configure a section in the config to a c# class. Registers for di container IOptions<SecuritySettings>
services.Configure<SecuritySettings>(Configuration.GetSection("AuthenticatedUsers"));

//if you need to grab configuration in the ConfigureServices method in startup you can do the following
Configuration.GetSection("AuthenticatedUsers").Get<SecuritySettings>().Users

you can get a config value or a service in startup by calling "var serviceProvider = services.BuildServiceProvider();"

Inject IOptions<SecuritySettings>.

App Settings In A Singleton
Inject IOptionsMonitor<LocalizationSettings> if you need to have it reload on file change when injected into a singleon.

You can just serialize what you need. ie: appsettings. { CacheExpirationTimeSpan: "1.02:03:04" }
which is "1.02:03:04" is 1 day, 2 hours, 3 mins, 4 seconds. The model would be a timespan. Basically just serialize whatever you want to bind to.

------------------------------------------------------------------------------------------------------------------------

*** Json Serialization To Regular Case ***

    services.AddMvc().AddJsonOptions(options =>
            {
                options.SerializerSettings.ContractResolver = new Newtonsoft.Json.Serialization.DefaultContractResolver();
            });

------------------------------------------------------------------------------------------------------------------------

*** Add special authentication filters. This requires that you must be in the list of users to run a controller that has [Authorized]. This example has windows auth with x.User.Identity.Name but you could use claims based checks ***

  var validUsers = new HashSet<string>(Configuration.GetSection("AuthenticatedUsers").Get<SecuritySettings>().Users, StringComparer.OrdinalIgnoreCase);

  services.AddMvc(config =>
            {
                var policy = new AuthorizationPolicyBuilder().RequireAssertion(x => validUsers.Contains(x.User.Identity.Name)).Build();

                config.Filters.Add(new AuthorizeFilter(policy));

            }
Configuration.GetSection("AuthenticatedUsers").Get<SecuritySettings>().Users


To have specific options reload on config change inject IOptionsSnapshot<> vs IOptions

-----------------------------------Adding another config that isn't app settings ---------------------------------------
1. add "headandneck.json"
	{
	  "HeadAndNeckSettings": {
			"Type": [ "Baseline", "Post-tx" ],
			"SubSite": [ "Lip", "Neck" ]
		}
	}

2. add class
    public class HeadAndNeckAppSettings
    {
        public List<string> Type { get; set; }
        public List<string> SubSite { get; set; }
    }

3. startup add .AddJsonFile("headandneck.json") --> full method chain is below

 var builder = new ConfigurationBuilder()
                .SetBasePath(env.ContentRootPath)
                .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                .AddJsonFile($"appsettings.{env.EnvironmentName}.json", optional: true)
                .AddJsonFile("headandneck.json", optional: false, reloadOnChange: true)
                .AddEnvironmentVariables();
            Configuration = builder.Build();

4. bind the configuration to the class

services.Configure<HeadAndNeckAppSettings>(configuration.GetSection("HeadAndNeckSettings"));
