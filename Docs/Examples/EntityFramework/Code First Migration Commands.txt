


1. "Enable-Migrations" this just gives you the initial folder and the command to turn on migrations
2. Add-Migration InitialCreate: (this creates the base database structure which is your base line). It really just is the add-migration command with a name called initial create so we know what our base line is
3. Add a property in a table, or remove whatever...then add it to the list of changes by using "add-migration DescriptionToGiveChange"

To update your database to the latest version, run the following:
"Update-Database"

"Get-Migrations" --> shows your which changes has been applied to your database

-------------------
If you get error complaining of nothing in web.config / appconfig: 
Change context from 
 public EntityFrameworkEntityDP()
            : base("name=EntityFrameworkEntityDP")


To: (remove "name=")
  public EntityFrameworkEntityDP()
            : base("EntityFrameworkEntityDP")
-------------------

Notes:

Configuration.cs has a seed command which is used if you want to have records there when you run an update. (This method will be called after migrating to the latest version.)
You can also enable code first migrations automatically through the command line. Otherwise you can just set the property here in the constructor


Commands Without Description
"Enable-Migrations" ==> Turns on migrations
"Add-Migration MigrationName" ==> Adds a migration with the specified name
"Update-Database" ==> Run's all the necessary migrations to get it up to the latest version
"Get-Migrations" ==> Displays what migrations have been run against the database you are using


------------------------------------------------------------------------

EF7 In Asp.net

Open a command prompt (Windows Key + R, type cmd, click OK)
Use the cd command to navigate to the project directory (where project.json is = ie. the mvc application)
Run dnx ef migrations add MyFirstMigration note:if you have more then 1 dbcontext (asp.net identity uses another context then add -c ToracGolfContext )
Run dnx ef database update to apply