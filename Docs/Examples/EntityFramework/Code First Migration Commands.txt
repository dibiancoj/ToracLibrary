


1. "Enable-Migrations" this just gives you the initial folder and the command to turn on migrations
2. Add-Migration InitialCreate: (this creates the base database structure which is your base line). It really just is the add-migration command with a name called initial create so we know what our base line is
** if you have an existing database use Add-Migration InitialCreate –IgnoreChanges **
3. Add a property in a table, or remove whatever...then add it to the list of changes by using "add-migration DescriptionToGiveChange"

To update your database to the latest version, run the following:
"Update-Database"

"Get-Migrations" --> shows your which changes has been applied to your database

-------------------
If you get error complaining of nothing in web.config / appconfig: 
Change context from 
 public EntityFrameworkEntityDP()
            : base("name=EntityFrameworkEntityDP")


To: (remove "name=")
  public EntityFrameworkEntityDP()
            : base("EntityFrameworkEntityDP")
-------------------

Notes:

Configuration.cs has a seed command which is used if you want to have records there when you run an update. (This method will be called after migrating to the latest version.)
You can also enable code first migrations automatically through the command line. Otherwise you can just set the property here in the constructor


Commands Without Description
"Enable-Migrations" ==> Turns on migrations
"Add-Migration MigrationName" ==> Adds a migration with the specified name
"Update-Database" ==> Run's all the necessary migrations to get it up to the latest version
"Get-Migrations" ==> Displays what migrations have been run against the database you are using



//if you don't want the code to automatically update the database then uncomment this.
//if you uncomment this then you will have to do the update-database to update the database - instead of having the code automatically do this
//Database.SetInitializer<EntityFrameworkEntityDP>(null);


------------------------------------------------------------------------

Getting a SQL Script - with migrations

If another developer wants these changes on their machine they can just sync once we check our changes into source control. Once they have our new migrations they can just run the Update-Database command to have the changes applied locally. However if we want to push these changes out to a test server, and eventually production, we probably want a SQL script we can hand off to our DBA.

Run the Update-Database command but this time specify the –Script flag so that changes are written to a script rather than applied. We’ll also specify a source and target migration to generate the script for. We want a script to go from an empty database ($InitialDatabase) to the latest version (migration AddPostAbstract).
If you don’t specify a target migration, Migrations will use the latest migration as the target. If you don't specify a source migrations, Migrations will use the current state of the database.

Run the "Update-Database -Script -SourceMigration: $InitialDatabase -TargetMigration: AddPostAbstract" command in Package Manager Console

-- you can alwyas run the following if you don't know what updates you need
"Update-Database -Script"

in code you can always do the following (if you have rights to create the database on the box)
 myContext.Database.CreateIfNotExists(); //this will create the database and apply all migrations that are registered
